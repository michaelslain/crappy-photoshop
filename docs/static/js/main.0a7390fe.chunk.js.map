{"version":3,"sources":["components/brushTool.jsx","components/eraserTool.jsx","components/sizeSlider.jsx","components/swatch.jsx","components/colorPicker.jsx","components/toolbar.jsx","components/canvas.jsx","App.jsx","serviceWorker.js","index.js"],"names":["BrushTool","tool","onTool","style","background","color","className","onClick","EraserTool","SizeSlider","size","onSize","type","min","max","value","e","target","Swatch","currentColor","onColor","width","height","ColorPicker","Toolbar","Canvas","React","isDraw","setIsDraw","canvasRef","handleDrawOnCanvas","clientX","clientY","ctx","current","getContext","beginPath","arc","Math","PI","fillStyle","fill","offsetWidth","offsetHeight","ref","onMouseDown","onMouseMove","onMouseUp","App","setTool","setSize","setColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a7390fe.chunk.js","sourcesContent":["import * as React from 'react'\nimport './brushTool.css'\n\nexport default function BrushTool({ tool, onTool }) {\n    function handleChangeTool() {\n        onTool('brush')\n    }\n\n    const style =\n        tool === 'brush'\n            ? {\n                  background: 'purple',\n                  color: 'white',\n              }\n            : null\n\n    return (\n        <div className=\"brush-tool\" style={style} onClick={handleChangeTool}>\n            B\n        </div>\n    )\n}\n","import * as React from 'react'\nimport './eraserTool.css'\n\nexport default function EraserTool({ tool, onTool }) {\n    function handleChangeTool() {\n        onTool('eraser')\n    }\n\n    const style =\n        tool === 'eraser'\n            ? {\n                  background: 'purple',\n                  color: 'white',\n              }\n            : null\n\n    return (\n        <div className=\"eraser-tool\" style={style} onClick={handleChangeTool}>\n            E\n        </div>\n    )\n}\n","import * as React from 'react'\nimport './sizeSlider.css'\n\nexport default function SizeSlider({ size, onSize }) {\n    function handleUpdateSize(e) {\n        onSize(e.target.value)\n    }\n\n    return (\n        <div className=\"slider-container\">\n            <input\n                className=\"slider\"\n                type=\"range\"\n                min={0}\n                max={100}\n                value={size}\n                className=\"slider\"\n                onChange={handleUpdateSize}\n            />\n            <div className=\"slider-value\">{size}</div>\n        </div>\n    )\n}\n","import * as React from 'react'\nimport './swatch.css'\n\nexport default function Swatch({ color, currentColor, onColor }) {\n    function handleChangeColor() {\n        onColor(color)\n    }\n\n    let style = {\n        background: color,\n    }\n\n    if (currentColor === color)\n        style = {\n            ...style,\n            width: '60px',\n            height: '60px',\n        }\n\n    return (\n        <div className=\"swatch\" style={style} onClick={handleChangeColor}></div>\n    )\n}\n","import * as React from 'react'\nimport './colorPicker.css'\n\n// Components\nimport Swatch from './swatch'\n\nexport default function ColorPicker({ color, onColor }) {\n    return (\n        <div className=\"color-picker\">\n            <Swatch color=\"red\" currentColor={color} onColor={onColor} />\n            <Swatch color=\"orange\" currentColor={color} onColor={onColor} />\n            <Swatch color=\"yellow\" currentColor={color} onColor={onColor} />\n            <Swatch color=\"green\" currentColor={color} onColor={onColor} />\n            <Swatch color=\"blue\" currentColor={color} onColor={onColor} />\n            <Swatch color=\"purple\" currentColor={color} onColor={onColor} />\n            <Swatch color=\"pink\" currentColor={color} onColor={onColor} />\n            <Swatch color=\"black\" currentColor={color} onColor={onColor} />\n        </div>\n    )\n}\n","import * as React from 'react'\nimport './toolbar.css'\n\n// Components\nimport BrushTool from './brushTool'\nimport EraserTool from './eraserTool'\nimport SizeSlider from './sizeSlider'\nimport ColorPicker from './colorPicker'\n\nexport default function Toolbar({\n    tool,\n    size,\n    color,\n    onTool,\n    onSize,\n    onColor,\n}) {\n    return (\n        <div className=\"toolbar\">\n            <BrushTool tool={tool} onTool={onTool} />\n            <EraserTool tool={tool} onTool={onTool} />\n            <SizeSlider size={size} onSize={onSize} />\n            <ColorPicker color={color} onColor={onColor} />\n        </div>\n    )\n}\n","import * as React from 'react'\nimport './canvas.css'\n\nexport default function Canvas({ tool, size, color }) {\n    const [isDraw, setIsDraw] = React.useState(false)\n\n    const canvasRef = React.useRef(null)\n\n    React.useEffect(() => {\n        if (canvasRef.current !== null) handleInitCanvas()\n    }, [canvasRef])\n\n    function handleInitCanvas() {\n        canvasRef.current.width = canvasRef.current.offsetWidth\n        canvasRef.current.height = canvasRef.current.offsetHeight\n    }\n\n    function handleStartDraw(e) {\n        setIsDraw(true)\n        handleDrawOnCanvas(e)\n    }\n\n    function handleEndDraw() {\n        setIsDraw(false)\n    }\n\n    function handleDrawOnCanvas(e) {\n        if (isDraw) {\n            const { clientX, clientY } = e\n\n            const ctx = canvasRef.current.getContext('2d')\n\n            ctx.beginPath()\n            ctx.arc(clientX, clientY - 100, size, 0, 2 * Math.PI)\n            if (tool === 'brush') ctx.fillStyle = color\n            else ctx.fillStyle = 'white'\n            ctx.fill()\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasRef}\n            onMouseDown={handleStartDraw}\n            onMouseMove={handleDrawOnCanvas}\n            onMouseUp={handleEndDraw}\n        ></canvas>\n    )\n}\n","import * as React from 'react'\nimport './App.css'\n\n// Components\nimport Toolbar from './components/toolbar'\nimport Canvas from './components/canvas'\n\nexport default function App() {\n    const [tool, setTool] = React.useState('brush')\n    const [size, setSize] = React.useState(50)\n    const [color, setColor] = React.useState('black')\n\n    return (\n        <>\n            <Toolbar\n                tool={tool}\n                size={size}\n                color={color}\n                onTool={setTool}\n                onSize={setSize}\n                onColor={setColor}\n            />\n            <Canvas tool={tool} size={size} color={color} />\n        </>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App.jsx'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}